import type { ContextDefinition } from "jsonld";
import type { Schema } from "shexj";
import type { LdoBase } from "./util.js";

/**
 * @category Types
 *
 * A `ShapeType` is an interface that contains information required by LDO to create a Linked Data Object. ShapeTypes are generated by the `@ldo/cli` `build` command, and it contains the following data:
 *
 * - ShEx Schema
 * - Generated Typescript Typings
 * - Generated Context
 *
 * @example
 * The following is the ShapeType generated for the example `FoafProfile.shex` file.
 * ```typescript
 * import { ShapeType } from "ldo";
 * import { foafProfileSchema } from "./foafProfile.schema.js";
 * import { foafProfileContext } from "./foafProfile.context.js";
 * import { FoafProfile } from "./foafProfile.typings.js";
 *
 * export const FoafProfileShapeType: ShapeType<FoafProfile> = {
 *   schema: foafProfileSchema,
 *   shape: "https://example.com/FoafProfile",
 *   context: foafProfileContext,
 * };
 * ```
 *
 * This can be imported and used to create a Linked Data Object.
 * ```typescript
 * import { FoafProfileShapeType } from "./.ldo/foafProfile.shapeTypes.js";
 * import { FoafProfile } from "./.ldo/foafProfile.typings.js";
 *
 * const profile: FoafProfile = ldoDataset
 *   .usingType(FoafProfileShapeType)
 *   .fromSubject("https://example.com/profile.ttl#me");
 * ```
 */
export type ShapeType<Type extends LdoBase> = {
  /**
   * The ShEx Schema
   */
  schema: Schema;
  /**
   * The key of the shape within the schema to which this ShapeType refers
   */
  shape: string;
  /**
   * A JSON-LD context generated for this Schema
   */
  context: ContextDefinition;
  /**
   * This field is optional and the `@ldo/cli` `build` command will not provide this field. The `exampleData` field's primary purpose is to force the TypeScript parser to recognize the provided `Type` so it can be auto-inferenced in the `LdoDataset.usingType` method.
   */
  exampleData?: Type;
};

/**
 * CompactShapeType is a reduced variant without a JSON-LD context, used for the
 * compact typings format.
 */
export type CompactShapeType<Type extends LdoBase> = {
  schema: Schema;
  shape: string;
  exampleData?: Type;
};

export type AnyShapeType<T extends LdoBase> =
  | ShapeType<T>
  | CompactShapeType<T>;
